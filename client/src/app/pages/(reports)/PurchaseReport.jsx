"use client";
import React from "react";
import { useGetPurchasesQuery } from "@/app/features/api/purchasesApi";
import { Table, Skeleton, Tag } from "antd";
import Print from "@/app/utils/Print";

const PurchaseReport = () => {
  const { data, isLoading } = useGetPurchasesQuery();

  if (isLoading) {
    return <Skeleton active />;
  }

  const purchases = data?.data || [];
  const pagination = data?.pagination || {};

  // Table columns
  const columns = [
    {
      title: "Date",
      dataIndex: "createdAt",
      key: "createdAt",
      render: (date) => new Date(date).toLocaleString(),
    },
    {
      title: "Product Name",
      dataIndex: ["product", "name"],
      key: "productName",
    },
    {
      title: "SKU",
      dataIndex: ["product", "sku"],
      key: "sku",
    },
    {
      title: "Store",
      dataIndex: ["store", "name"],
      key: "store",
    },
    {
      title: "Warehouse",
      dataIndex: ["warehouse", "name"],
      key: "warehouse",
    },
    { title: "Quantity", dataIndex: "quantity", key: "quantity" },
    { title: "Amount", dataIndex: "amount", key: "amount" },
    { title: "Payment", dataIndex: "payment", key: "payment" },
    {
      title: "Due",
      dataIndex: "due",
      key: "due",
      render: (value) => (
        <span style={{ color: value > 0 ? "red" : "green" }}>{value}</span>
      ),
    },
    { title: "Commission", dataIndex: "commission", key: "commission" },
    {
      title: "Status",
      dataIndex: "status",
      key: "status",
      render: (status) => (
        <Tag color={status === "PENDING" ? "orange" : "green"}>{status}</Tag>
      ),
    },
  ];

  // invoiceData build for print
  const invoiceData = {
    brandName: "Selo Pos",
    tagline: "Smart Purchase Reporting",
    date: new Date().toLocaleDateString(),
    invoiceNumber: "PR-" + new Date().getTime(),
    items: purchases.map((row, index) => ({
      sl: index + 1,
      date: new Date(row.createdAt).toLocaleString(),
      productName: row?.product?.name || "-",
      sku: row?.product?.sku || "-",
      store: row?.store?.name || "-",
      warehouse: row?.warehouse?.name || "-",
      quantity: row?.quantity ?? 0,
      amount: row?.amount ?? 0,
      payment: row?.payment ?? 0,
      due: row?.due ?? 0,
      commission: row?.commission ?? 0,
      status: row?.status || "-",
    })),
    terms: "This report is auto-generated by the system.",
  };

  return (
    <div className="p-2 sm:p-4 md:p-8">
      <h1 className="text-xl sm:text-2xl md:text-3xl font-bold mb-6 text-center">
        Purchases Report
      </h1>

      {/* Print button */}
      <div className="flex justify-end mb-4">
        <Print invoiceData={invoiceData} PurchasesReport />
      </div>

      {/* Table */}
      <div className="overflow-x-auto rounded-lg shadow-md">
        <Table
          columns={columns}
          dataSource={purchases}
          rowKey="id"
          bordered
          pagination={{
            current: pagination.page,
            pageSize: pagination.limit || 5,
            total: pagination.total,
          }}
          scroll={{ x: "max-content" }}
        />
      </div>
    </div>
  );
};

export default PurchaseReport;
